
'use client';

import { useState, useEffect, useMemo, useCallback } from 'react';
import { useParams, useSearchParams } from 'next/navigation';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow, TableCaption, TableFooter } from '@/components/ui/table';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Badge } from '@/components/ui/badge';
import LoadingSpinner from '@/components/LoadingSpinner';
import { getInvoices } from '@/app/admin/invoices/actions';
import type { Invoice } from '@/types/invoice';
import { AlertTriangle, Printer, User, ArrowLeft } from 'lucide-react';
import Link from 'next/link';

export default function UserSalesReportDetailsPage() {
  const params = useParams();
  const searchParams = useSearchParams();

  const uid = params.uid as string;
  const userName = searchParams.get('name') || 'Unknown User';

  const [allInvoices, setAllInvoices] = useState<Invoice[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchInvoices = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    try {
      const result = await getInvoices();
      if (result.success && result.invoices) {
        setAllInvoices(result.invoices);
      } else {
        throw new Error(result.message || "Failed to load invoice data.");
      }
    } catch (e: any) {
      setError("Failed to load invoice data: " + e.message);
    } finally {
      setIsLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchInvoices();
  }, [fetchInvoices]);

  const userInvoices = useMemo(() => {
    if (!uid) return [];
    return allInvoices
      .filter(invoice => invoice.createdByUid === uid)
      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());
  }, [allInvoices, uid]);

  const reportTotals = useMemo(() => {
    return userInvoices.reduce(
      (acc, invoice) => {
        acc.totalAmount += invoice.amount;
        acc.invoiceCount += 1;
        return acc;
      },
      { totalAmount: 0, invoiceCount: 0 }
    );
  }, [userInvoices]);

  const handlePrint = () => {
    window.print();
  };

  if (!uid) {
    return (
      <Card>
        <CardContent className="p-8 text-center text-destructive">
          <AlertTriangle className="mx-auto h-12 w-12 mb-4" />
          <p className="text-lg font-semibold">User ID is missing.</p>
          <p className="text-muted-foreground">Cannot display report without a valid user ID.</p>
           <Button asChild variant="link" className="mt-4">
              <Link href="/admin/user-sales-report">
                <ArrowLeft className="mr-2 h-4 w-4" /> Go Back
              </Link>
            </Button>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="shadow-md print:shadow-none print:border-none">
      <CardHeader className="print:hidden">
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
          <div>
            <CardTitle className="text-2xl flex items-center">
              <User className="mr-3 h-6 w-6 text-primary" /> Sales Report for {userName}
            </CardTitle>
            <CardDescription>
              Showing all {reportTotals.invoiceCount} invoices generated by this user.
            </CardDescription>
          </div>
          <div className="flex items-center gap-2">
            <Button asChild variant="outline" size="sm">
              <Link href="/admin/user-sales-report">
                <ArrowLeft className="mr-2 h-4 w-4" /> Back to Summary
              </Link>
            </Button>
            <Button onClick={handlePrint} variant="outline" size="sm">
              <Printer className="mr-2 h-4 w-4" /> Print Report
            </Button>
          </div>
        </div>
      </CardHeader>

      {/* Title for Print View */}
      <div className="hidden print:block p-6">
        <h1 className="text-2xl font-bold">Sales Report for: {userName}</h1>
        <p className="text-sm text-gray-600">Generated on: {new Date().toLocaleDateString()}</p>
        <hr className="my-4"/>
      </div>
      
      <CardContent className="space-y-6">
        {isLoading ? (
          <div className="flex items-center justify-center py-8">
            <LoadingSpinner size={32} />
            <p className="ml-2 text-muted-foreground">Loading invoice data...</p>
          </div>
        ) : error ? (
          <div className="p-4 my-4 text-sm text-destructive-foreground bg-destructive rounded-md flex items-center">
            <AlertTriangle className="h-5 w-5 mr-2" />
            {error}
          </div>
        ) : (
          <ScrollArea className="h-[60vh] rounded-md border print:h-auto print:overflow-visible print:border-none">
            <Table>
              <TableCaption className="print:text-xs print:mt-2">
                A detailed list of transactions for {userName}.
                {userInvoices.length === 0 && " No transactions found."}
              </TableCaption>
              <TableHeader className="sticky top-0 bg-background z-10 print:static print:bg-transparent">
                <TableRow>
                  <TableHead className="w-[150px]">Invoice ID</TableHead>
                  <TableHead>Date & Time</TableHead>
                  <TableHead>Customer</TableHead>
                  <TableHead>Services</TableHead>
                  <TableHead className="text-right">Amount (₹)</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {userInvoices.length > 0 ? (
                  userInvoices.map((invoice) => (
                    <TableRow key={invoice.id}>
                      <TableCell className="font-mono">
                          <Button variant="link" asChild className="p-0 h-auto font-normal">
                            <Link href={`/invoice/${invoice.id}`} title="View & Print Invoice" target="_blank">
                                {invoice.id}
                            </Link>
                          </Button>
                      </TableCell>
                      <TableCell>{new Date(invoice.date).toLocaleString()}</TableCell>
                      <TableCell>{invoice.customerName || 'N/A'}</TableCell>
                      <TableCell>
                        {invoice.selectedServices && invoice.selectedServices.length > 0 ? (
                          <ul className="list-disc list-inside text-xs">
                            {invoice.selectedServices.map((service, index) => (
                              <li key={`${service.id}-${index}`}>{service.name}</li>
                            ))}
                          </ul>
                        ) : "N/A"}
                      </TableCell>
                      <TableCell className="text-right font-mono">₹{invoice.amount.toFixed(2)}</TableCell>
                    </TableRow>
                  ))
                ) : (
                  <TableRow>
                    <TableCell colSpan={5} className="text-center text-muted-foreground py-8">
                      No invoices found for this user.
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
              {userInvoices.length > 0 && (
                <TableFooter className="print:bg-transparent">
                  <TableRow className="font-semibold bg-muted/50 hover:bg-muted/60 print:bg-transparent text-base">
                    <TableCell colSpan={4}>Total</TableCell>
                    <TableCell className="text-right font-mono">₹{reportTotals.totalAmount.toFixed(2)}</TableCell>
                  </TableRow>
                </TableFooter>
              )}
            </Table>
          </ScrollArea>
        )}
      </CardContent>
    </Card>
  );
}
